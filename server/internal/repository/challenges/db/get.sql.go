// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: get.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const getForUpdate = `-- name: GetForUpdate :one
SELECT
    c.id AS challenge_id,
    c.challenge,
    c.attempts,
    u.id AS user_id,
    u.auth_key,
    u.auth_key_algorithm
FROM challenges AS c
    JOIN users AS u ON u.id = c.user_id
WHERE u.username = $1
  AND c.device_name = $2
  AND c.used_at IS NULL
  AND c.expires_at > now()
    FOR UPDATE OF c
`

type GetForUpdateParams struct {
	Username   string
	DeviceName string
}

type GetForUpdateRow struct {
	ChallengeID      uuid.UUID
	Challenge        []byte
	Attempts         int32
	UserID           uuid.UUID
	AuthKey          []byte
	AuthKeyAlgorithm string
}

func (q *Queries) GetForUpdate(ctx context.Context, arg GetForUpdateParams) (GetForUpdateRow, error) {
	row := q.db.QueryRow(ctx, getForUpdate, arg.Username, arg.DeviceName)
	var i GetForUpdateRow
	err := row.Scan(
		&i.ChallengeID,
		&i.Challenge,
		&i.Attempts,
		&i.UserID,
		&i.AuthKey,
		&i.AuthKeyAlgorithm,
	)
	return i, err
}
